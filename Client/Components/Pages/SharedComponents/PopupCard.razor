<style type="text/css">
    .btnPopupCard{
    position: absolute;
    transition: opacity .25s ease-in-out;
    -moz-transition: opacity .25s ease-in-out;
    -webkit-transition: opacity .25s ease-in-out;
    z-index: 1000;
    }
    .modalBackground{
    width: 100%;
    position: absolute;
    left: 0;
    right: 0;
    }
</style>

@if(Visible)
{
    <div class="modalBackground" @onclick="Close">
        <div class="btnPopupCard" @onclick:stopPropagation="true"
             style="@($"opacity:{Opacity};left:{HorizontalOffSet}px;top:{VerticalOffSet}px")">
             <div class="card rounded" style="width:400px;height:300px;">
                 <div class="card-body">
                     <h4 class="card-title">Popo</h4>
                     <p class="card-text">
                        @ChildContent
                     </p>
                     <div class="row">
                        <div class="col-md-6">
                        </div>
                         <div class="col-md-6" style="text-align:center;">
                             <button class="btn btn-danger" onclick="Close"></button>
                         </div>
                     </div>
                 </div>
             </div>

        </div>
    </div>
}

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClose { get; set; }
    [Parameter] public int HorizontalOffSet { get; set; }
    [Parameter] public int VerticalOffSet { get; set; }
    public bool Visible { get; set; }
    public double Opacity { get; set; }
    [Parameter] public string Title { get; set; } = "Popup Card";
    [Parameter] public string Width { get; set; } = "400px";
    [Parameter] public string Height { get; set; } = "300px";
    [Parameter] public int FadeMs { get; set; } = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    public async Task Close(MouseEventArgs args = null)
    {
        Visible = false;
        await OnClose.InvokeAsync(args);
    }
    public void Show(MouseEventArgs args =null)
    {
        if (args != null)
        {
            HorizontalOffSet = (int)args.ClientX;
            VerticalOffSet = (int)args.ClientY;
          
        }
        Visible = true;
        Opacity = 1.0;
    }


}
